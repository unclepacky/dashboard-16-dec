// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ******************************************************************
// CURRENCY  - CONVERSION
// ******************************************************************
model Currency {
  id                 String                   @id @default(uuid())
  code               String                   @unique
  createdAt          DateTime                 @default(now())
  conversionRateLogs CurrencyConversionRate[]
  unit               Unit[]
  rateHistory        RateHistory[] // Reverse relation to PriceHistory
  Contract           Contract[]
}

model CurrencyConversionRate {
  id         String   @id @default(uuid())
  currencyId String
  currency   Currency @relation(fields: [currencyId], references: [id])
  rate       Float // Daily conversion rate to the base currency (USD)
  recordedAt DateTime @default(now()) // Date when the rate was recorded
}

// ******************************************************************
// PROPERTY SECTIONS/PARTS
// ******************************************************************

model Property {
  id       String     @id @default(uuid())
  name     String     @unique
  building Building[]
}

model Building {
  id   String @id @default(uuid())
  name String @unique

  propertyId String
  property   Property @relation(fields: [propertyId], references: [id])

  unit Unit[]
}

model Unit {
  id          String     @id @unique @default(uuid())
  name        String     @unique
  type        UnitType   @default(STUDIO)
  status      UnitStatus @default(VACANT)
  block       Block      @default(A)
  monthlyRate Float      @default(0) // Most recent default price in USD
  dailyRate   Float      @default(0) // Most recent default daily rate in USD

  rateHistory RateHistory[]

  currencyId String   @default("e69607d7-71d6-429d-b15e-d220201e7a20")
  currency   Currency @relation(fields: [currencyId], references: [id])

  buildingId String   @default("77159616-0c50-4bd2-a708-2391b45debe5")
  building   Building @relation(fields: [buildingId], references: [id])

  updatedAt DateTime @updatedAt

  Contract Contract[]
}

model RateHistory {
  id           String   @id @default(uuid())
  newMonthRate Float    @default(0.0) // Price at the time of record
  newDailyRate Float    @default(0.0) // Price at the time of record
  recordedAt   DateTime @default(now()) // Date when the price was set

  unitId String
  unit   Unit   @relation(fields: [unitId], references: [id], onDelete: Cascade)

  currencyId String
  currency   Currency @relation(fields: [currencyId], references: [id])
}

// ******************************************************************
// CONTACT  - EMPLOEYEES
// ******************************************************************
model Employee {
  id               String            @id @default(uuid())
  name             String            @unique
  accessPrivileges AccessPrivilege[]
}

model AccessPrivilege {
  id         String   @id @default(uuid())
  privilege  String // e.g., "admin", "read_only"
  employeeId String
  employee   Employee @relation(fields: [employeeId], references: [id])
}

model Customer {
  id     String         @id @default(uuid())
  name   String         @unique // Full name of the customer.
  status CustomerStatus @default(POTENTIAL_TENANT)

  contract Contract[]
}

// ******************************************************************
// CLIENT FORM - INQUIRY / CONTRACT
// ******************************************************************
model Contract {
  id        String       @id @default(uuid())
  type      ContractType @default(ACTIVE)
  startDate DateTime     @default(now())
  endDate   DateTime
  deposit   Float        @default(0)
  amount    Float        @default(0)

  currencyId String
  currency   Currency @relation(fields: [currencyId], references: [id])

  unitId String
  unit   Unit   @relation(fields: [unitId], references: [id], onDelete: Cascade)

  customerId String?
  customer   Customer? @relation(fields: [customerId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// ******************************************************************
// ENUM DECLARATIONS
// ******************************************************************
enum UnitStatus {
  VACANT
  OCCUPIED
  MAINTENANCE
  RESERVED
}

enum UnitType {
  STUDIO
  SUITE
  J_SUITE
  DUPLEX
}

enum Block {
  A
  B
  C
  D
}

enum CustomerStatus {
  POTENTIAL_TENANT // Customer has shown interest but hasn't rented yet.
  TENANT // Customer is currently renting a unit.
  EX_TENANT // Customer has previously rented but doesn't currently.
}

enum ContractType {
  INQUIRY
  ACTIVE
  INACTIVE
  RELEASED
  RESERVED
}
